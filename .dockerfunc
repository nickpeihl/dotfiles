#!/bin/bash
# bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=nickpeihl

#
# helper functions
#
dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

#
# container aliases
#
audacity(){
	del_stopped audacity

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--device /dev/snd \
		--group-add audio \
		--name audacity \
		jess/audacity
}
chrome(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*

	del_stopped chrome

	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -it \
		--memory 3gb \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-v "${HOME}/.chrome:/data" \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
		--security-opt seccomp:/home/nick/.dotfiles/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/usb \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
		--name chrome \
		jess/chrome --user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"

}
firefox(){
	del_stopped firefox

	docker run -d \
		--memory 3gb \
		--net host \
		--cpuset-cpus 0 \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.firefox/cache:/root/.cache/mozilla" \
		-v "${HOME}/.firefox/mozilla:/root/.mozilla" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name firefox \
		jess/firefox "$@"

	# exit current shell
	exit 0
}
gimp(){
	del_stopped gimp

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/.gtkrc:/root/.gtkrc" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name gimp \
		jess/gimp
}
hollywood(){
    docker run --rm -it \
	   --name hollywood \
	   jess/hollywood
}
jsonresume(){
    	docker run --rm -it \
		-v "${HOME}/.dotfiles:/root/.dotfiles" \
		-v "${HOME}/Development:/root/Development" \
		-v "$PWD":/usr/src/app \
		-w /usr/src/app \
		--name jsonresume \
		node npx resume-cli export /root/Development/resume/nickpeihl.html
}
lynx(){
	docker run --rm -it \
		-v "${HOME}/Downloads:/root/Downloads" \
		--name lynx \
		jess/lynx "$0"
}
mpd(){
	del_stopped mpd

	# adding cap sys_admin so I can use nfs mount
	# the container runs as a unpriviledged user mpd
	docker run -it \
		--device /dev/snd \
		--cap-add SYS_ADMIN \
		-e MPD_HOST=/var/lib/mpd/socket \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/exports:/etc/exports:ro \
		-v "${HOME}/.mpd:/var/lib/mpd" \
		-v "${HOME}/.mpd.conf:/etc/mpd.conf" \
		--name mpd \
		jess/mpd
}
node(){
    del_stopped node

    docker run -it \
	   -e "DISPLAY=unix:${DISPLAY}" \
           -v "$PWD":/usr/src/app \
           -w /usr/src/app \
           -p 9229:9229 \
           --name node \
           node:8 \
           node "$@"
}
npm(){
    del_stopped npm

    docker run -it \
	   -e "DISPLAY=unix:${DISPLAY}" \
           -v "$PWD":/usr/src/app \
           -v "$HOME/.npm":/root/.npm \
           -v "$HOME/.npmrc":/root/.npmrc \
           -w /usr/src/app \
           -p 9966:9966 \
           --name npm \
           node:8 \
           npm "$@"
}
npx(){
	del_stopped npx
	docker run -it \
		-e "DISPLAY=unix:${DISPLAY}" \
		-v "$PWD":/usr/src/app \
		-v "$HOME/.npm":/root/.npm \
		-v "$HOME/.npmrc":/root/.npmrc \
		-w /usr/src/app \
		-p 9966:9966 \
		--name npx \
		node:8 \
		npx "$@"
}
pulseaudio(){
	del_stopped pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/snd \
		-p 4713:4713 \
		--restart always \
		--group-add audio \
		--name pulseaudio \
		jess/pulseaudio
}
spotify(){
	del_stopped spotify

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name spotify \
		jess/spotify
}
sqlite(){
	del_stopped sqlite

	docker run -it \
		-v ${PWD}:/root/db \
		--disable-content-trust \
		--name sqlite \
		nouchka/sqlite3 "$@"
}
vscode(){
    del_stopped vscode

    docker run -d \
	   -v /etc/localtime:/etc/localtime:ro \
           -v /tmp/.X11-unix:/tmp/.X11-unix \
           -v ${HOME}:/home/user \
	   -v ${HOME}/.gtkrc-2.0:/etc/gtk-2.0/gtkrc \
           -e DISPLAY=unix${DISPLAY} \
	   -e GDK_SCALE \
           -e GDK_DPI_SCALE \
	   --device /dev/dri \
           --name vscode \
           jess/vscode
}
###
### Awesome sauce by @jpetazzo
###
if command -v "docker" &>/dev/null; then
    command_not_found_handle () {
	# Check if there is a container image with that name
	if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
	    echo "$0: $1: command not found"
	    return
	fi

	# Check that it's really the name of the image, not a prefix
	if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
	    echo "$0: $1: command not found"
	    return
	fi

	docker run -ti -u "$(whoami)" -w "$HOME" \
	       "$(env | cut -d= -f1 | awk '{print "-e", $1}')" \
	       --device /dev/snd \
	       -v /etc/passwd:/etc/passwd:ro \
	       -v /etc/group:/etc/group:ro \
	       -v /etc/localtime:/etc/localtime:ro \
	       -v /home:/home \
	       -v /tmp/.X11-unix:/tmp/.X11-unix \
	       "${DOCKER_REPO_PREFIX}/${1}" "$@"
    }
fi
